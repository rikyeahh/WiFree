<?php
/* php service (called by buy.js) to update the database with the bought items, if possible */

session_start();
// buying is only allowed to authenticated users
if (!isset($_SESSION["login"])) {
    echo "ERROR";
    return;
}
// get the cart info, given by the AJAX request
$cart = json_decode($_GET["cart"]);
$con = require '../db/databaseAccess.php';
// begin transaction and commit it only if requested quantities are actually available
$con->autocommit(FALSE);
$con->begin_transaction();
$dbError = "";
foreach($cart as $id => $qty) { // for each item in cart
    try {
        if (!($stmt = $con->prepare("UPDATE products SET availability = availability - ?, npurchase = npurchase + ? WHERE id=?"))) {
            $dbError .= "Prepare failed: (" . $con->errno . ") " . $con->error . "\n";
        }
        // build the query
        if (!$stmt->bind_param("iis", $qty, $qty, $id)) {
            $dbError .= "Binding parameters failed: (" . $stmt->errno . ") " . $stmt->error . "\n";
        }
        // execute query
        if (!$stmt->execute()) {
            $dbError .= "Execute failed: (" . $stmt->errno . ") " . $stmt->error . "\n";
        }
    } catch (Exception $e) { // exception handling, rollback
        echo $e;
        $con->rollback();
        return;
    }
}
// if errors that haven't triggered excpetions
if (!empty($dbError)) {
    // if error is generated by the trigger in the database, it outputs ERROR IN AVAILABILITY
    if (strpos($dbError, 'ERROR IN AVAILABILITY') !== false) {
        echo "AVAILABILITY ERROR";
    }
    else {
        echo $dbError;
    }
    $con->rollback();
    return;
}
// if all has gone good
$con->commit();
